schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  character(characterIds: [String]): [Character!]!
  "Get a particular droid by Id."
  droid("The Id of the droid." id: String): Droid
  "Retrieve a hero by a particular Star Wars episode."
  hero("The episode to look up by." episode: Episode! = NEWHOPE): Character
  "Gets a human by Id."
  human("The Id of the human to retrieve." id: String): Human
  search(text: String): [SearchResult]
}

type Mutation {
  "Creates a review for a given Star Wars episode."
  createReview("The episode to review." episode: Episode! "The review." review: ReviewInput!): Review!
}

type Subscription {
  onReview(episode: Episode!): Review!
}

"A human character in the Star Wars universe."
type Human implements Character {
  "The episodes the character appears in."
  appearsIn: [Episode]
  friends(after: String before: String first: PaginationAmount last: PaginationAmount): CharacterConnection
  height(unit: Unit): Float
  "The planet the character is originally from."
  homePlanet: String
  "The unique identifier for the character."
  id: ID!
  "The name of the character."
  name: String
}

"A droid in the Star Wars universe."
type Droid implements Character {
  "The episodes the character appears in."
  appearsIn: [Episode]
  friends(after: String before: String first: PaginationAmount last: PaginationAmount): CharacterConnection
  height(unit: Unit): Float
  "The unique identifier for the character."
  id: ID!
  "The name of the character."
  name: String
  "The droid's primary function."
  primaryFunction: String
}

"The Star Wars episodes."
enum Episode {
  "Star Wars Episode IV: A New Hope"
  NEWHOPE
  "Star Wars Episode V: Empire Strikes Back"
  EMPIRE
  "Star Wars Episode VI: Return of the Jedi"
  JEDI
}

"A character in the Star Wars universe."
interface Character {
  "The episodes the character appears in."
  appearsIn: [Episode]
  "The names of the character's friends."
  friends(after: String before: String first: PaginationAmount last: PaginationAmount): CharacterConnection
  "The height of the character."
  height(unit: Unit): Float
  "The unique identifier for the character."
  id: ID!
  "The name of the character."
  name: String
}

union SearchResult = Starship | Human | Droid

"A review of a particular movie."
type Review {
  "An explanation for the rating."
  commentary: String
  "The number of stars given for this review."
  stars: Int!
}

"A review of a particular movie."
input ReviewInput {
  "An explanation for the rating."
  commentary: String
  "The number of stars given for this review."
  stars: Int!
}

"Different units of measurement."
enum Unit {
  FOOT
  METERS
}

"A connection to a list of items."
type CharacterConnection {
  "A list of edges."
  edges: [CharacterEdge!]
  "A flattened list of the nodes."
  nodes: [Character]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  totalCount: Int!
}

"A starship in the Star Wars universe."
type Starship {
  "The Id of the starship."
  id: String
  "The length of the starship."
  length: Float!
  "The name of the starship."
  name: String
}

"Information about pagination in a connection."
type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"An edge in a connection."
type CharacterEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Character
}

directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access to the annotated resource." roles: [String!]) repeatable on OBJECT | FIELD_DEFINITION